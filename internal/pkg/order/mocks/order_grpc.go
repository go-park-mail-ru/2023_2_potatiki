// Code generated by MockGen. DO NOT EDIT.
// Source: ./gen/order_grpc.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gen "github.com/go-park-mail-ru/2023_2_potatiki/internal/pkg/order/delivery/grpc/gen"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockOrderClient is a mock of OrderClient interface.
type MockOrderClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrderClientMockRecorder
}

// MockOrderClientMockRecorder is the mock recorder for MockOrderClient.
type MockOrderClientMockRecorder struct {
	mock *MockOrderClient
}

// NewMockOrderClient creates a new mock instance.
func NewMockOrderClient(ctrl *gomock.Controller) *MockOrderClient {
	mock := &MockOrderClient{ctrl: ctrl}
	mock.recorder = &MockOrderClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderClient) EXPECT() *MockOrderClientMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderClient) CreateOrder(ctx context.Context, in *gen.CreateOrderRequest, opts ...grpc.CallOption) (*gen.CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrder", varargs...)
	ret0, _ := ret[0].(*gen.CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderClientMockRecorder) CreateOrder(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderClient)(nil).CreateOrder), varargs...)
}

// GetOrders mocks base method.
func (m *MockOrderClient) GetOrders(ctx context.Context, in *gen.OrdersRequest, opts ...grpc.CallOption) (*gen.OrdersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOrders", varargs...)
	ret0, _ := ret[0].(*gen.OrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderClientMockRecorder) GetOrders(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderClient)(nil).GetOrders), varargs...)
}

// MockOrderServer is a mock of OrderServer interface.
type MockOrderServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrderServerMockRecorder
}

// MockOrderServerMockRecorder is the mock recorder for MockOrderServer.
type MockOrderServerMockRecorder struct {
	mock *MockOrderServer
}

// NewMockOrderServer creates a new mock instance.
func NewMockOrderServer(ctrl *gomock.Controller) *MockOrderServer {
	mock := &MockOrderServer{ctrl: ctrl}
	mock.recorder = &MockOrderServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderServer) EXPECT() *MockOrderServerMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderServer) CreateOrder(arg0 context.Context, arg1 *gen.CreateOrderRequest) (*gen.CreateOrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1)
	ret0, _ := ret[0].(*gen.CreateOrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderServerMockRecorder) CreateOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderServer)(nil).CreateOrder), arg0, arg1)
}

// GetOrders mocks base method.
func (m *MockOrderServer) GetOrders(arg0 context.Context, arg1 *gen.OrdersRequest) (*gen.OrdersResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", arg0, arg1)
	ret0, _ := ret[0].(*gen.OrdersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderServerMockRecorder) GetOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderServer)(nil).GetOrders), arg0, arg1)
}

// mustEmbedUnimplementedOrderServer mocks base method.
func (m *MockOrderServer) mustEmbedUnimplementedOrderServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrderServer")
}

// mustEmbedUnimplementedOrderServer indicates an expected call of mustEmbedUnimplementedOrderServer.
func (mr *MockOrderServerMockRecorder) mustEmbedUnimplementedOrderServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrderServer", reflect.TypeOf((*MockOrderServer)(nil).mustEmbedUnimplementedOrderServer))
}

// MockUnsafeOrderServer is a mock of UnsafeOrderServer interface.
type MockUnsafeOrderServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeOrderServerMockRecorder
}

// MockUnsafeOrderServerMockRecorder is the mock recorder for MockUnsafeOrderServer.
type MockUnsafeOrderServerMockRecorder struct {
	mock *MockUnsafeOrderServer
}

// NewMockUnsafeOrderServer creates a new mock instance.
func NewMockUnsafeOrderServer(ctrl *gomock.Controller) *MockUnsafeOrderServer {
	mock := &MockUnsafeOrderServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeOrderServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeOrderServer) EXPECT() *MockUnsafeOrderServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedOrderServer mocks base method.
func (m *MockUnsafeOrderServer) mustEmbedUnimplementedOrderServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedOrderServer")
}

// mustEmbedUnimplementedOrderServer indicates an expected call of mustEmbedUnimplementedOrderServer.
func (mr *MockUnsafeOrderServerMockRecorder) mustEmbedUnimplementedOrderServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedOrderServer", reflect.TypeOf((*MockUnsafeOrderServer)(nil).mustEmbedUnimplementedOrderServer))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_2_potatiki/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
)

// MockCommentsUsecase is a mock of CommentsUsecase interface.
type MockCommentsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCommentsUsecaseMockRecorder
}

// MockCommentsUsecaseMockRecorder is the mock recorder for MockCommentsUsecase.
type MockCommentsUsecaseMockRecorder struct {
	mock *MockCommentsUsecase
}

// NewMockCommentsUsecase creates a new mock instance.
func NewMockCommentsUsecase(ctrl *gomock.Controller) *MockCommentsUsecase {
	mock := &MockCommentsUsecase{ctrl: ctrl}
	mock.recorder = &MockCommentsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentsUsecase) EXPECT() *MockCommentsUsecaseMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockCommentsUsecase) CreateComment(arg0 context.Context, arg1 models.CommentPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentsUsecaseMockRecorder) CreateComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockCommentsUsecase)(nil).CreateComment), arg0, arg1)
}

// GetProductComments mocks base method.
func (m *MockCommentsUsecase) GetProductComments(arg0 context.Context, arg1 uuid.UUID) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductComments", arg0, arg1)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductComments indicates an expected call of GetProductComments.
func (mr *MockCommentsUsecaseMockRecorder) GetProductComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductComments", reflect.TypeOf((*MockCommentsUsecase)(nil).GetProductComments), arg0, arg1)
}

// MockCommentsRepo is a mock of CommentsRepo interface.
type MockCommentsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCommentsRepoMockRecorder
}

// MockCommentsRepoMockRecorder is the mock recorder for MockCommentsRepo.
type MockCommentsRepoMockRecorder struct {
	mock *MockCommentsRepo
}

// NewMockCommentsRepo creates a new mock instance.
func NewMockCommentsRepo(ctrl *gomock.Controller) *MockCommentsRepo {
	mock := &MockCommentsRepo{ctrl: ctrl}
	mock.recorder = &MockCommentsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentsRepo) EXPECT() *MockCommentsRepoMockRecorder {
	return m.recorder
}

// MakeComment mocks base method.
func (m *MockCommentsRepo) MakeComment(arg0 context.Context, arg1 models.CommentPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeComment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeComment indicates an expected call of MakeComment.
func (mr *MockCommentsRepoMockRecorder) MakeComment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeComment", reflect.TypeOf((*MockCommentsRepo)(nil).MakeComment), arg0, arg1)
}

// ReadProductComments mocks base method.
func (m *MockCommentsRepo) ReadProductComments(arg0 context.Context, arg1 uuid.UUID) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProductComments", arg0, arg1)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProductComments indicates an expected call of ReadProductComments.
func (mr *MockCommentsRepoMockRecorder) ReadProductComments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProductComments", reflect.TypeOf((*MockCommentsRepo)(nil).ReadProductComments), arg0, arg1)
}

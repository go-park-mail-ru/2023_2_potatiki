// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_2_potatiki/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCategoryUsecase is a mock of CategoryUsecase interface.
type MockCategoryUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryUsecaseMockRecorder
}

// MockCategoryUsecaseMockRecorder is the mock recorder for MockCategoryUsecase.
type MockCategoryUsecaseMockRecorder struct {
	mock *MockCategoryUsecase
}

// NewMockCategoryUsecase creates a new mock instance.
func NewMockCategoryUsecase(ctrl *gomock.Controller) *MockCategoryUsecase {
	mock := &MockCategoryUsecase{ctrl: ctrl}
	mock.recorder = &MockCategoryUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryUsecase) EXPECT() *MockCategoryUsecaseMockRecorder {
	return m.recorder
}

// Categories mocks base method.
func (m *MockCategoryUsecase) Categories(arg0 context.Context) (models.CategoryTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Categories", arg0)
	ret0, _ := ret[0].(models.CategoryTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Categories indicates an expected call of Categories.
func (mr *MockCategoryUsecaseMockRecorder) Categories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Categories", reflect.TypeOf((*MockCategoryUsecase)(nil).Categories), arg0)
}

// MockCategoryRepo is a mock of CategoryRepo interface.
type MockCategoryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryRepoMockRecorder
}

// MockCategoryRepoMockRecorder is the mock recorder for MockCategoryRepo.
type MockCategoryRepoMockRecorder struct {
	mock *MockCategoryRepo
}

// NewMockCategoryRepo creates a new mock instance.
func NewMockCategoryRepo(ctrl *gomock.Controller) *MockCategoryRepo {
	mock := &MockCategoryRepo{ctrl: ctrl}
	mock.recorder = &MockCategoryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryRepo) EXPECT() *MockCategoryRepoMockRecorder {
	return m.recorder
}

// ReadCategories mocks base method.
func (m *MockCategoryRepo) ReadCategories(arg0 context.Context) (models.CategoryTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCategories", arg0)
	ret0, _ := ret[0].(models.CategoryTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCategories indicates an expected call of ReadCategories.
func (mr *MockCategoryRepoMockRecorder) ReadCategories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCategories", reflect.TypeOf((*MockCategoryRepo)(nil).ReadCategories), arg0)
}

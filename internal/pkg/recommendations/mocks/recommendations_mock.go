// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_2_potatiki/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
)

// MockRecommendationsUsecase is a mock of RecommendationsUsecase interface.
type MockRecommendationsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockRecommendationsUsecaseMockRecorder
}

// MockRecommendationsUsecaseMockRecorder is the mock recorder for MockRecommendationsUsecase.
type MockRecommendationsUsecaseMockRecorder struct {
	mock *MockRecommendationsUsecase
}

// NewMockRecommendationsUsecase creates a new mock instance.
func NewMockRecommendationsUsecase(ctrl *gomock.Controller) *MockRecommendationsUsecase {
	mock := &MockRecommendationsUsecase{ctrl: ctrl}
	mock.recorder = &MockRecommendationsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecommendationsUsecase) EXPECT() *MockRecommendationsUsecaseMockRecorder {
	return m.recorder
}

// AnonRecommendations mocks base method.
func (m *MockRecommendationsUsecase) AnonRecommendations(arg0 context.Context, arg1 uuid.UUID, arg2 int64) (models.ProductSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AnonRecommendations", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.ProductSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AnonRecommendations indicates an expected call of AnonRecommendations.
func (mr *MockRecommendationsUsecaseMockRecorder) AnonRecommendations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AnonRecommendations", reflect.TypeOf((*MockRecommendationsUsecase)(nil).AnonRecommendations), arg0, arg1, arg2)
}

// Recommendations mocks base method.
func (m *MockRecommendationsUsecase) Recommendations(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 int64) (models.ProductSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recommendations", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(models.ProductSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recommendations indicates an expected call of Recommendations.
func (mr *MockRecommendationsUsecaseMockRecorder) Recommendations(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recommendations", reflect.TypeOf((*MockRecommendationsUsecase)(nil).Recommendations), arg0, arg1, arg2, arg3)
}

// UpdateUserActivity mocks base method.
func (m *MockRecommendationsUsecase) UpdateUserActivity(arg0 context.Context, arg1 uuid.UUID, arg2 models.UserActivity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserActivity", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserActivity indicates an expected call of UpdateUserActivity.
func (mr *MockRecommendationsUsecaseMockRecorder) UpdateUserActivity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserActivity", reflect.TypeOf((*MockRecommendationsUsecase)(nil).UpdateUserActivity), arg0, arg1, arg2)
}

// MockRecommendationsRepo is a mock of RecommendationsRepo interface.
type MockRecommendationsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRecommendationsRepoMockRecorder
}

// MockRecommendationsRepoMockRecorder is the mock recorder for MockRecommendationsRepo.
type MockRecommendationsRepoMockRecorder struct {
	mock *MockRecommendationsRepo
}

// NewMockRecommendationsRepo creates a new mock instance.
func NewMockRecommendationsRepo(ctrl *gomock.Controller) *MockRecommendationsRepo {
	mock := &MockRecommendationsRepo{ctrl: ctrl}
	mock.recorder = &MockRecommendationsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecommendationsRepo) EXPECT() *MockRecommendationsRepoMockRecorder {
	return m.recorder
}

// CreateUserActivity mocks base method.
func (m *MockRecommendationsRepo) CreateUserActivity(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserActivity", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserActivity indicates an expected call of CreateUserActivity.
func (mr *MockRecommendationsRepoMockRecorder) CreateUserActivity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserActivity", reflect.TypeOf((*MockRecommendationsRepo)(nil).CreateUserActivity), arg0, arg1)
}

// ReadProduct mocks base method.
func (m *MockRecommendationsRepo) ReadProduct(arg0 context.Context, arg1 uuid.UUID) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProduct", arg0, arg1)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProduct indicates an expected call of ReadProduct.
func (mr *MockRecommendationsRepoMockRecorder) ReadProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProduct", reflect.TypeOf((*MockRecommendationsRepo)(nil).ReadProduct), arg0, arg1)
}

// ReadProductsFromCategories mocks base method.
func (m *MockRecommendationsRepo) ReadProductsFromCategories(arg0 context.Context, arg1 models.CategoryIDs) (models.ProductSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProductsFromCategories", arg0, arg1)
	ret0, _ := ret[0].(models.ProductSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProductsFromCategories indicates an expected call of ReadProductsFromCategories.
func (mr *MockRecommendationsRepoMockRecorder) ReadProductsFromCategories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProductsFromCategories", reflect.TypeOf((*MockRecommendationsRepo)(nil).ReadProductsFromCategories), arg0, arg1)
}

// ReadProductsFromCategory mocks base method.
func (m *MockRecommendationsRepo) ReadProductsFromCategory(arg0 context.Context, arg1 int64) (models.ProductSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProductsFromCategory", arg0, arg1)
	ret0, _ := ret[0].(models.ProductSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProductsFromCategory indicates an expected call of ReadProductsFromCategory.
func (mr *MockRecommendationsRepoMockRecorder) ReadProductsFromCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProductsFromCategory", reflect.TypeOf((*MockRecommendationsRepo)(nil).ReadProductsFromCategory), arg0, arg1)
}

// ReadProductsFromParentCategory mocks base method.
func (m *MockRecommendationsRepo) ReadProductsFromParentCategory(arg0 context.Context, arg1 int64) (models.ProductSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProductsFromParentCategory", arg0, arg1)
	ret0, _ := ret[0].(models.ProductSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProductsFromParentCategory indicates an expected call of ReadProductsFromParentCategory.
func (mr *MockRecommendationsRepoMockRecorder) ReadProductsFromParentCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProductsFromParentCategory", reflect.TypeOf((*MockRecommendationsRepo)(nil).ReadProductsFromParentCategory), arg0, arg1)
}

// ReadRecommendations mocks base method.
func (m *MockRecommendationsRepo) ReadRecommendations(arg0 context.Context, arg1 models.ProductIDs) (models.ProductSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRecommendations", arg0, arg1)
	ret0, _ := ret[0].(models.ProductSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRecommendations indicates an expected call of ReadRecommendations.
func (mr *MockRecommendationsRepoMockRecorder) ReadRecommendations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRecommendations", reflect.TypeOf((*MockRecommendationsRepo)(nil).ReadRecommendations), arg0, arg1)
}

// ReadUserActivity mocks base method.
func (m *MockRecommendationsRepo) ReadUserActivity(arg0 context.Context, arg1 uuid.UUID) (models.UserActivityStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserActivity", arg0, arg1)
	ret0, _ := ret[0].(models.UserActivityStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserActivity indicates an expected call of ReadUserActivity.
func (mr *MockRecommendationsRepoMockRecorder) ReadUserActivity(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserActivity", reflect.TypeOf((*MockRecommendationsRepo)(nil).ReadUserActivity), arg0, arg1)
}

// UpdateUserActivity mocks base method.
func (m *MockRecommendationsRepo) UpdateUserActivity(arg0 context.Context, arg1 uuid.UUID, arg2 models.UserActivityStore) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserActivity", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserActivity indicates an expected call of UpdateUserActivity.
func (mr *MockRecommendationsRepoMockRecorder) UpdateUserActivity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserActivity", reflect.TypeOf((*MockRecommendationsRepo)(nil).UpdateUserActivity), arg0, arg1, arg2)
}

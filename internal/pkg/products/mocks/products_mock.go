// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_2_potatiki/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockProductsUsecase is a mock of ProductsUsecase interface.
type MockProductsUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProductsUsecaseMockRecorder
}

// MockProductsUsecaseMockRecorder is the mock recorder for MockProductsUsecase.
type MockProductsUsecaseMockRecorder struct {
	mock *MockProductsUsecase
}

// NewMockProductsUsecase creates a new mock instance.
func NewMockProductsUsecase(ctrl *gomock.Controller) *MockProductsUsecase {
	mock := &MockProductsUsecase{ctrl: ctrl}
	mock.recorder = &MockProductsUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsUsecase) EXPECT() *MockProductsUsecaseMockRecorder {
	return m.recorder
}

// GetCategory mocks base method.
func (m *MockProductsUsecase) GetCategory(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 int64) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockProductsUsecaseMockRecorder) GetCategory(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockProductsUsecase)(nil).GetCategory), arg0, arg1, arg2, arg3)
}

// GetProduct mocks base method.
func (m *MockProductsUsecase) GetProduct(arg0 context.Context, arg1 uuid.UUID) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductsUsecaseMockRecorder) GetProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductsUsecase)(nil).GetProduct), arg0, arg1)
}

// GetProducts mocks base method.
func (m *MockProductsUsecase) GetProducts(arg0 context.Context, arg1, arg2 int64) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockProductsUsecaseMockRecorder) GetProducts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockProductsUsecase)(nil).GetProducts), arg0, arg1, arg2)
}

// MockProductsRepo is a mock of ProductsRepo interface.
type MockProductsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProductsRepoMockRecorder
}

// MockProductsRepoMockRecorder is the mock recorder for MockProductsRepo.
type MockProductsRepoMockRecorder struct {
	mock *MockProductsRepo
}

// NewMockProductsRepo creates a new mock instance.
func NewMockProductsRepo(ctrl *gomock.Controller) *MockProductsRepo {
	mock := &MockProductsRepo{ctrl: ctrl}
	mock.recorder = &MockProductsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsRepo) EXPECT() *MockProductsRepoMockRecorder {
	return m.recorder
}

// ReadCategory mocks base method.
func (m *MockProductsRepo) ReadCategory(arg0 context.Context, arg1 uuid.UUID, arg2, arg3 int64) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCategory", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCategory indicates an expected call of ReadCategory.
func (mr *MockProductsRepoMockRecorder) ReadCategory(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCategory", reflect.TypeOf((*MockProductsRepo)(nil).ReadCategory), arg0, arg1, arg2, arg3)
}

// ReadProduct mocks base method.
func (m *MockProductsRepo) ReadProduct(arg0 context.Context, arg1 uuid.UUID) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProduct", arg0, arg1)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProduct indicates an expected call of ReadProduct.
func (mr *MockProductsRepoMockRecorder) ReadProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProduct", reflect.TypeOf((*MockProductsRepo)(nil).ReadProduct), arg0, arg1)
}

// ReadProducts mocks base method.
func (m *MockProductsRepo) ReadProducts(arg0 context.Context, arg1, arg2 int64) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProducts", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProducts indicates an expected call of ReadProducts.
func (mr *MockProductsRepoMockRecorder) ReadProducts(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProducts", reflect.TypeOf((*MockProductsRepo)(nil).ReadProducts), arg0, arg1, arg2)
}

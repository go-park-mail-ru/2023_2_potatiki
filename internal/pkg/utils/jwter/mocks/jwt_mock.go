// Code generated by MockGen. DO NOT EDIT.
// Source: jwter.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
)

// MockConfiger is a mock of Configer interface.
type MockConfiger struct {
	ctrl     *gomock.Controller
	recorder *MockConfigerMockRecorder
}

// MockConfigerMockRecorder is the mock recorder for MockConfiger.
type MockConfigerMockRecorder struct {
	mock *MockConfiger
}

// NewMockConfiger creates a new mock instance.
func NewMockConfiger(ctrl *gomock.Controller) *MockConfiger {
	mock := &MockConfiger{ctrl: ctrl}
	mock.recorder = &MockConfigerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfiger) EXPECT() *MockConfigerMockRecorder {
	return m.recorder
}

// GetIssuer mocks base method.
func (m *MockConfiger) GetIssuer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssuer")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIssuer indicates an expected call of GetIssuer.
func (mr *MockConfigerMockRecorder) GetIssuer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssuer", reflect.TypeOf((*MockConfiger)(nil).GetIssuer))
}

// GetSecret mocks base method.
func (m *MockConfiger) GetSecret() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockConfigerMockRecorder) GetSecret() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockConfiger)(nil).GetSecret))
}

// GetTTL mocks base method.
func (m *MockConfiger) GetTTL() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTTL")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTTL indicates an expected call of GetTTL.
func (mr *MockConfigerMockRecorder) GetTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTTL", reflect.TypeOf((*MockConfiger)(nil).GetTTL))
}

// MockJWTer is a mock of JWTer interface.
type MockJWTer struct {
	ctrl     *gomock.Controller
	recorder *MockJWTerMockRecorder
}

// MockJWTerMockRecorder is the mock recorder for MockJWTer.
type MockJWTerMockRecorder struct {
	mock *MockJWTer
}

// NewMockJWTer creates a new mock instance.
func NewMockJWTer(ctrl *gomock.Controller) *MockJWTer {
	mock := &MockJWTer{ctrl: ctrl}
	mock.recorder = &MockJWTerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWTer) EXPECT() *MockJWTerMockRecorder {
	return m.recorder
}

// DecodeAuthToken mocks base method.
func (m *MockJWTer) DecodeAuthToken(arg0 string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeAuthToken", arg0)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeAuthToken indicates an expected call of DecodeAuthToken.
func (mr *MockJWTerMockRecorder) DecodeAuthToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeAuthToken", reflect.TypeOf((*MockJWTer)(nil).DecodeAuthToken), arg0)
}

// DecodeCSRFToken mocks base method.
func (m *MockJWTer) DecodeCSRFToken(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeCSRFToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeCSRFToken indicates an expected call of DecodeCSRFToken.
func (mr *MockJWTerMockRecorder) DecodeCSRFToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeCSRFToken", reflect.TypeOf((*MockJWTer)(nil).DecodeCSRFToken), arg0)
}

// EncodeAuthToken mocks base method.
func (m *MockJWTer) EncodeAuthToken(arg0 uuid.UUID) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeAuthToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EncodeAuthToken indicates an expected call of EncodeAuthToken.
func (mr *MockJWTerMockRecorder) EncodeAuthToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeAuthToken", reflect.TypeOf((*MockJWTer)(nil).EncodeAuthToken), arg0)
}

// EncodeCSRFToken mocks base method.
func (m *MockJWTer) EncodeCSRFToken(arg0 string) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeCSRFToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// EncodeCSRFToken indicates an expected call of EncodeCSRFToken.
func (mr *MockJWTerMockRecorder) EncodeCSRFToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeCSRFToken", reflect.TypeOf((*MockJWTer)(nil).EncodeCSRFToken), arg0)
}

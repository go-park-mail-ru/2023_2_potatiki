// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/go-park-mail-ru/2023_2_potatiki/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// CheckToken mocks base method.
func (m *MockAuthUsecase) CheckToken(arg0 context.Context, arg1 string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckToken indicates an expected call of CheckToken.
func (mr *MockAuthUsecaseMockRecorder) CheckToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockAuthUsecase)(nil).CheckToken), arg0, arg1)
}

// GetProfile mocks base method.
func (m *MockAuthUsecase) GetProfile(arg0 context.Context, arg1 uuid.UUID) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0, arg1)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockAuthUsecaseMockRecorder) GetProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockAuthUsecase)(nil).GetProfile), arg0, arg1)
}

// SignIn mocks base method.
func (m *MockAuthUsecase) SignIn(arg0 context.Context, arg1 models.User) (models.Profile, string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", arg0, arg1)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(time.Time)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthUsecaseMockRecorder) SignIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthUsecase)(nil).SignIn), arg0, arg1)
}

// SignUp mocks base method.
func (m *MockAuthUsecase) SignUp(arg0 context.Context, arg1 models.User) (models.Profile, string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", arg0, arg1)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(time.Time)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthUsecaseMockRecorder) SignUp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthUsecase)(nil).SignUp), arg0, arg1)
}

// MockAuthRepo is a mock of AuthRepo interface.
type MockAuthRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepoMockRecorder
}

// MockAuthRepoMockRecorder is the mock recorder for MockAuthRepo.
type MockAuthRepoMockRecorder struct {
	mock *MockAuthRepo
}

// NewMockAuthRepo creates a new mock instance.
func NewMockAuthRepo(ctrl *gomock.Controller) *MockAuthRepo {
	mock := &MockAuthRepo{ctrl: ctrl}
	mock.recorder = &MockAuthRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepo) EXPECT() *MockAuthRepoMockRecorder {
	return m.recorder
}

// CheckUser mocks base method.
func (m *MockAuthRepo) CheckUser(arg0 context.Context, arg1 models.User) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", arg0, arg1)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockAuthRepoMockRecorder) CheckUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockAuthRepo)(nil).CheckUser), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockAuthRepo) CreateUser(arg0 context.Context, arg1 models.User) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthRepoMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthRepo)(nil).CreateUser), arg0, arg1)
}

// ReadProfile mocks base method.
func (m *MockAuthRepo) ReadProfile(arg0 context.Context, arg1 uuid.UUID) (models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProfile", arg0, arg1)
	ret0, _ := ret[0].(models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProfile indicates an expected call of ReadProfile.
func (mr *MockAuthRepoMockRecorder) ReadProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProfile", reflect.TypeOf((*MockAuthRepo)(nil).ReadProfile), arg0, arg1)
}

// MockAuthAuther is a mock of AuthAuther interface.
type MockAuthAuther struct {
	ctrl     *gomock.Controller
	recorder *MockAuthAutherMockRecorder
}

// MockAuthAutherMockRecorder is the mock recorder for MockAuthAuther.
type MockAuthAutherMockRecorder struct {
	mock *MockAuthAuther
}

// NewMockAuthAuther creates a new mock instance.
func NewMockAuthAuther(ctrl *gomock.Controller) *MockAuthAuther {
	mock := &MockAuthAuther{ctrl: ctrl}
	mock.recorder = &MockAuthAutherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthAuther) EXPECT() *MockAuthAutherMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockAuthAuther) GenerateToken(arg0 *models.Profile) (string, time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(time.Time)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthAutherMockRecorder) GenerateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthAuther)(nil).GenerateToken), arg0)
}

// GetClaims mocks base method.
func (m *MockAuthAuther) GetClaims(arg0 string) (*models.Claims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClaims", arg0)
	ret0, _ := ret[0].(*models.Claims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClaims indicates an expected call of GetClaims.
func (mr *MockAuthAutherMockRecorder) GetClaims(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClaims", reflect.TypeOf((*MockAuthAuther)(nil).GetClaims), arg0)
}

// MockAuthConfig is a mock of AuthConfig interface.
type MockAuthConfig struct {
	ctrl     *gomock.Controller
	recorder *MockAuthConfigMockRecorder
}

// MockAuthConfigMockRecorder is the mock recorder for MockAuthConfig.
type MockAuthConfigMockRecorder struct {
	mock *MockAuthConfig
}

// NewMockAuthConfig creates a new mock instance.
func NewMockAuthConfig(ctrl *gomock.Controller) *MockAuthConfig {
	mock := &MockAuthConfig{ctrl: ctrl}
	mock.recorder = &MockAuthConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthConfig) EXPECT() *MockAuthConfigMockRecorder {
	return m.recorder
}

// GetAccessExpirationTime mocks base method.
func (m *MockAuthConfig) GetAccessExpirationTime() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessExpirationTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetAccessExpirationTime indicates an expected call of GetAccessExpirationTime.
func (mr *MockAuthConfigMockRecorder) GetAccessExpirationTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessExpirationTime", reflect.TypeOf((*MockAuthConfig)(nil).GetAccessExpirationTime))
}

// GetJwtAccess mocks base method.
func (m *MockAuthConfig) GetJwtAccess() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJwtAccess")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetJwtAccess indicates an expected call of GetJwtAccess.
func (mr *MockAuthConfigMockRecorder) GetJwtAccess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJwtAccess", reflect.TypeOf((*MockAuthConfig)(nil).GetJwtAccess))
}

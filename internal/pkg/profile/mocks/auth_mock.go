// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_2_potatiki/internal/models"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/satori/go.uuid"
)

// MockProfileUsecase is a mock of ProfileUsecase interface.
type MockProfileUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProfileUsecaseMockRecorder
}

// MockProfileUsecaseMockRecorder is the mock recorder for MockProfileUsecase.
type MockProfileUsecaseMockRecorder struct {
	mock *MockProfileUsecase
}

// NewMockProfileUsecase creates a new mock instance.
func NewMockProfileUsecase(ctrl *gomock.Controller) *MockProfileUsecase {
	mock := &MockProfileUsecase{ctrl: ctrl}
	mock.recorder = &MockProfileUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileUsecase) EXPECT() *MockProfileUsecaseMockRecorder {
	return m.recorder
}

// GetProfile mocks base method.
func (m *MockProfileUsecase) GetProfile(arg0 context.Context, arg1 uuid.UUID) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", arg0, arg1)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockProfileUsecaseMockRecorder) GetProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockProfileUsecase)(nil).GetProfile), arg0, arg1)
}

// UpdateData mocks base method.
func (m *MockProfileUsecase) UpdateData(arg0 context.Context, arg1 uuid.UUID, arg2 *models.UpdateProfileDataPayload) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockProfileUsecaseMockRecorder) UpdateData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockProfileUsecase)(nil).UpdateData), arg0, arg1, arg2)
}

// UpdatePhoto mocks base method.
func (m *MockProfileUsecase) UpdatePhoto(ctx context.Context, userID uuid.UUID, filePhotoByte []byte, fileType string) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoto", ctx, userID, filePhotoByte, fileType)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePhoto indicates an expected call of UpdatePhoto.
func (mr *MockProfileUsecaseMockRecorder) UpdatePhoto(ctx, userID, filePhotoByte, fileType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoto", reflect.TypeOf((*MockProfileUsecase)(nil).UpdatePhoto), ctx, userID, filePhotoByte, fileType)
}

// MockProfileRepo is a mock of ProfileRepo interface.
type MockProfileRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProfileRepoMockRecorder
}

// MockProfileRepoMockRecorder is the mock recorder for MockProfileRepo.
type MockProfileRepoMockRecorder struct {
	mock *MockProfileRepo
}

// NewMockProfileRepo creates a new mock instance.
func NewMockProfileRepo(ctrl *gomock.Controller) *MockProfileRepo {
	mock := &MockProfileRepo{ctrl: ctrl}
	mock.recorder = &MockProfileRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileRepo) EXPECT() *MockProfileRepoMockRecorder {
	return m.recorder
}

// CreateProfile mocks base method.
func (m *MockProfileRepo) CreateProfile(arg0 context.Context, arg1 *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockProfileRepoMockRecorder) CreateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockProfileRepo)(nil).CreateProfile), arg0, arg1)
}

// GetProfileIdByLogin mocks base method.
func (m *MockProfileRepo) GetProfileIdByLogin(arg0 context.Context, arg1 string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileIdByLogin", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileIdByLogin indicates an expected call of GetProfileIdByLogin.
func (mr *MockProfileRepoMockRecorder) GetProfileIdByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileIdByLogin", reflect.TypeOf((*MockProfileRepo)(nil).GetProfileIdByLogin), arg0, arg1)
}

// ReadProfile mocks base method.
func (m *MockProfileRepo) ReadProfile(arg0 context.Context, arg1 uuid.UUID) (*models.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProfile", arg0, arg1)
	ret0, _ := ret[0].(*models.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProfile indicates an expected call of ReadProfile.
func (mr *MockProfileRepoMockRecorder) ReadProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProfile", reflect.TypeOf((*MockProfileRepo)(nil).ReadProfile), arg0, arg1)
}

// UpdatePhoto mocks base method.
func (m *MockProfileRepo) UpdatePhoto(arg0 context.Context, arg1 uuid.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoto", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePhoto indicates an expected call of UpdatePhoto.
func (mr *MockProfileRepoMockRecorder) UpdatePhoto(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoto", reflect.TypeOf((*MockProfileRepo)(nil).UpdatePhoto), arg0, arg1, arg2)
}

// UpdateProfile mocks base method.
func (m *MockProfileRepo) UpdateProfile(arg0 context.Context, arg1 *models.Profile) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockProfileRepoMockRecorder) UpdateProfile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockProfileRepo)(nil).UpdateProfile), arg0, arg1)
}

// MockProfileConfig is a mock of ProfileConfig interface.
type MockProfileConfig struct {
	ctrl     *gomock.Controller
	recorder *MockProfileConfigMockRecorder
}

// MockProfileConfigMockRecorder is the mock recorder for MockProfileConfig.
type MockProfileConfigMockRecorder struct {
	mock *MockProfileConfig
}

// NewMockProfileConfig creates a new mock instance.
func NewMockProfileConfig(ctrl *gomock.Controller) *MockProfileConfig {
	mock := &MockProfileConfig{ctrl: ctrl}
	mock.recorder = &MockProfileConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileConfig) EXPECT() *MockProfileConfigMockRecorder {
	return m.recorder
}

// GetPhotosFilePath mocks base method.
func (m *MockProfileConfig) GetPhotosFilePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPhotosFilePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPhotosFilePath indicates an expected call of GetPhotosFilePath.
func (mr *MockProfileConfigMockRecorder) GetPhotosFilePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPhotosFilePath", reflect.TypeOf((*MockProfileConfig)(nil).GetPhotosFilePath))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_2_potatiki/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSearchUsecase is a mock of SearchUsecase interface.
type MockSearchUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSearchUsecaseMockRecorder
}

// MockSearchUsecaseMockRecorder is the mock recorder for MockSearchUsecase.
type MockSearchUsecaseMockRecorder struct {
	mock *MockSearchUsecase
}

// NewMockSearchUsecase creates a new mock instance.
func NewMockSearchUsecase(ctrl *gomock.Controller) *MockSearchUsecase {
	mock := &MockSearchUsecase{ctrl: ctrl}
	mock.recorder = &MockSearchUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchUsecase) EXPECT() *MockSearchUsecaseMockRecorder {
	return m.recorder
}

// SearchProducts mocks base method.
func (m *MockSearchUsecase) SearchProducts(arg0 context.Context, arg1 string) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProducts", arg0, arg1)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProducts indicates an expected call of SearchProducts.
func (mr *MockSearchUsecaseMockRecorder) SearchProducts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProducts", reflect.TypeOf((*MockSearchUsecase)(nil).SearchProducts), arg0, arg1)
}

// MockSearchRepo is a mock of SearchRepo interface.
type MockSearchRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSearchRepoMockRecorder
}

// MockSearchRepoMockRecorder is the mock recorder for MockSearchRepo.
type MockSearchRepoMockRecorder struct {
	mock *MockSearchRepo
}

// NewMockSearchRepo creates a new mock instance.
func NewMockSearchRepo(ctrl *gomock.Controller) *MockSearchRepo {
	mock := &MockSearchRepo{ctrl: ctrl}
	mock.recorder = &MockSearchRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSearchRepo) EXPECT() *MockSearchRepoMockRecorder {
	return m.recorder
}

// ReadProductsByName mocks base method.
func (m *MockSearchRepo) ReadProductsByName(arg0 context.Context, arg1 string) ([]models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadProductsByName", arg0, arg1)
	ret0, _ := ret[0].([]models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadProductsByName indicates an expected call of ReadProductsByName.
func (mr *MockSearchRepoMockRecorder) ReadProductsByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadProductsByName", reflect.TypeOf((*MockSearchRepo)(nil).ReadProductsByName), arg0, arg1)
}

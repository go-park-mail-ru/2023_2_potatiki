// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels(in *jlexer.Lexer, out *UpdateProfileDataPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "passwords":
			easyjson4629a5bbDecode(in, &out.Passwords)
		case "phone":
			out.Phone = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels(out *jwriter.Writer, in UpdateProfileDataPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"passwords\":"
		out.RawString(prefix[1:])
		easyjson4629a5bbEncode(out, in.Passwords)
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateProfileDataPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateProfileDataPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateProfileDataPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateProfileDataPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels(l, v)
}
func easyjson4629a5bbDecode(in *jlexer.Lexer, out *struct {
	OldPass string `json:"oldPass" validate:"omitempty,min=8,max=32"`
	NewPass string `json:"newPass" validate:"omitempty,min=8,max=32"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "oldPass":
			out.OldPass = string(in.String())
		case "newPass":
			out.NewPass = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4629a5bbEncode(out *jwriter.Writer, in struct {
	OldPass string `json:"oldPass" validate:"omitempty,min=8,max=32"`
	NewPass string `json:"newPass" validate:"omitempty,min=8,max=32"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"oldPass\":"
		out.RawString(prefix[1:])
		out.String(string(in.OldPass))
	}
	{
		const prefix string = ",\"newPass\":"
		out.RawString(prefix)
		out.String(string(in.NewPass))
	}
	out.RawByte('}')
}
func easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels1(in *jlexer.Lexer, out *SignUpPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels1(out *jwriter.Writer, in SignUpPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignUpPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignUpPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignUpPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignUpPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels1(l, v)
}
func easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels2(in *jlexer.Lexer, out *SignInPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "login":
			out.Login = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels2(out *jwriter.Writer, in SignInPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix[1:])
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"password\":"
		out.RawString(prefix)
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignInPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignInPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignInPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignInPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels2(l, v)
}
func easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels3(in *jlexer.Lexer, out *CommentPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "productId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ProductID).UnmarshalText(data))
			}
		case "pros":
			out.Pros = string(in.String())
		case "cons":
			out.Cons = string(in.String())
		case "comment":
			out.Comment = string(in.String())
		case "rating":
			out.Rating = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels3(out *jwriter.Writer, in CommentPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"productId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.ProductID).MarshalText())
	}
	{
		const prefix string = ",\"pros\":"
		out.RawString(prefix)
		out.String(string(in.Pros))
	}
	{
		const prefix string = ",\"cons\":"
		out.RawString(prefix)
		out.String(string(in.Cons))
	}
	{
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		out.String(string(in.Comment))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Int(int(in.Rating))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels3(l, v)
}
func easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels4(in *jlexer.Lexer, out *AddressPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "city":
			out.City = string(in.String())
		case "street":
			out.Street = string(in.String())
		case "house":
			out.House = string(in.String())
		case "flat":
			out.Flat = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels4(out *jwriter.Writer, in AddressPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix[1:])
		out.String(string(in.City))
	}
	{
		const prefix string = ",\"street\":"
		out.RawString(prefix)
		out.String(string(in.Street))
	}
	{
		const prefix string = ",\"house\":"
		out.RawString(prefix)
		out.String(string(in.House))
	}
	{
		const prefix string = ",\"flat\":"
		out.RawString(prefix)
		out.String(string(in.Flat))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddressPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddressPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson4629a5bbEncodeGithubComGoParkMailRu20232PotatikiInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddressPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddressPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson4629a5bbDecodeGithubComGoParkMailRu20232PotatikiInternalModels4(l, v)
}

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels(in *jlexer.Lexer, out *CartUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "productsInfo":
			if in.IsNull() {
				in.Skip()
				out.Products = nil
			} else {
				in.Delim('[')
				if out.Products == nil {
					if !in.IsDelim(']') {
						out.Products = make([]CartProductUpdate, 0, 2)
					} else {
						out.Products = []CartProductUpdate{}
					}
				} else {
					out.Products = (out.Products)[:0]
				}
				for !in.IsDelim(']') {
					var v1 CartProductUpdate
					(v1).UnmarshalEasyJSON(in)
					out.Products = append(out.Products, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels(out *jwriter.Writer, in CartUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"productsInfo\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Products == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Products {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels(l, v)
}
func easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels1(in *jlexer.Lexer, out *CartProductUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "quantity":
			out.Quantity = int64(in.Int64())
		case "productId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Id).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels1(out *jwriter.Writer, in CartProductUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Quantity))
	}
	{
		const prefix string = ",\"productId\":"
		out.RawString(prefix)
		out.RawText((in.Id).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartProductUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartProductUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartProductUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartProductUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels1(l, v)
}
func easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels2(in *jlexer.Lexer, out *CartProductDelete) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "productId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.Id).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels2(out *jwriter.Writer, in CartProductDelete) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"productId\":"
		out.RawString(prefix[1:])
		out.RawText((in.Id).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartProductDelete) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartProductDelete) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartProductDelete) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartProductDelete) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels2(l, v)
}
func easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels3(in *jlexer.Lexer, out *CartProduct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "quantity":
			out.Quantity = int64(in.Int64())
		case "product":
			(out.Product).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels3(out *jwriter.Writer, in CartProduct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"quantity\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Quantity))
	}
	{
		const prefix string = ",\"product\":"
		out.RawString(prefix)
		(in.Product).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CartProduct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CartProduct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CartProduct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CartProduct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels3(l, v)
}
func easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels4(in *jlexer.Lexer, out *Cart) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "products":
			if in.IsNull() {
				in.Skip()
				out.Products = nil
			} else {
				in.Delim('[')
				if out.Products == nil {
					if !in.IsDelim(']') {
						out.Products = make([]CartProduct, 0, 0)
					} else {
						out.Products = []CartProduct{}
					}
				} else {
					out.Products = (out.Products)[:0]
				}
				for !in.IsDelim(']') {
					var v4 CartProduct
					(v4).UnmarshalEasyJSON(in)
					out.Products = append(out.Products, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels4(out *jwriter.Writer, in Cart) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"products\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if in.Products == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Products {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Cart) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Cart) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDdb0949aEncodeGithubComGoParkMailRu20232PotatikiInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Cart) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Cart) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDdb0949aDecodeGithubComGoParkMailRu20232PotatikiInternalModels4(l, v)
}

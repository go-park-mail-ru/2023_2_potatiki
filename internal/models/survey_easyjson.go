// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels(in *jlexer.Lexer, out *SurveysCompleted) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "completedSurveys":
			if in.IsNull() {
				in.Skip()
				out.CompletedSurveys = nil
			} else {
				in.Delim('[')
				if out.CompletedSurveys == nil {
					if !in.IsDelim(']') {
						out.CompletedSurveys = make([]string, 0, 4)
					} else {
						out.CompletedSurveys = []string{}
					}
				} else {
					out.CompletedSurveys = (out.CompletedSurveys)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.CompletedSurveys = append(out.CompletedSurveys, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels(out *jwriter.Writer, in SurveysCompleted) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"completedSurveys\":"
		out.RawString(prefix[1:])
		if in.CompletedSurveys == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.CompletedSurveys {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveysCompleted) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveysCompleted) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveysCompleted) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveysCompleted) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels(l, v)
}
func easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels1(in *jlexer.Lexer, out *SurveyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "questionId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.QuestionID).UnmarshalText(data))
			}
		case "resultId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ResultID).UnmarshalText(data))
			}
		case "answer":
			out.Answer = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels1(out *jwriter.Writer, in SurveyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"questionId\":"
		out.RawString(prefix[1:])
		out.RawText((in.QuestionID).MarshalText())
	}
	{
		const prefix string = ",\"resultId\":"
		out.RawString(prefix)
		out.RawText((in.ResultID).MarshalText())
	}
	{
		const prefix string = ",\"answer\":"
		out.RawString(prefix)
		out.Int(int(in.Answer))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SurveyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SurveyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SurveyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SurveyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels1(l, v)
}
func easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels2(in *jlexer.Lexer, out *Survey) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "surveyId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "surveyName":
			out.Name = string(in.String())
		case "resultId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ResultID).UnmarshalText(data))
			}
		case "Questions":
			if in.IsNull() {
				in.Skip()
				out.Questions = nil
			} else {
				in.Delim('[')
				if out.Questions == nil {
					if !in.IsDelim(']') {
						out.Questions = make([]Question, 0, 1)
					} else {
						out.Questions = []Question{}
					}
				} else {
					out.Questions = (out.Questions)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Question
					(v4).UnmarshalEasyJSON(in)
					out.Questions = append(out.Questions, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels2(out *jwriter.Writer, in Survey) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"surveyId\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"surveyName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"resultId\":"
		out.RawString(prefix)
		out.RawText((in.ResultID).MarshalText())
	}
	{
		const prefix string = ",\"Questions\":"
		out.RawString(prefix)
		if in.Questions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Questions {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Survey) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Survey) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Survey) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Survey) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels2(l, v)
}
func easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels3(in *jlexer.Lexer, out *Stat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "questionName":
			out.QuestionName = string(in.String())
		case "statValue":
			out.StatValue = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels3(out *jwriter.Writer, in Stat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"questionName\":"
		out.RawString(prefix[1:])
		out.String(string(in.QuestionName))
	}
	{
		const prefix string = ",\"statValue\":"
		out.RawString(prefix)
		out.Float64(float64(in.StatValue))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels3(l, v)
}
func easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels4(in *jlexer.Lexer, out *QuestionType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "questionType":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels4(out *jwriter.Writer, in QuestionType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"questionType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v QuestionType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v QuestionType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *QuestionType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *QuestionType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels4(l, v)
}
func easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels5(in *jlexer.Lexer, out *Question) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "questionId":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.ID).UnmarshalText(data))
			}
		case "questionName":
			out.Name = string(in.String())
		case "questionType":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels5(out *jwriter.Writer, in Question) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"questionId\":"
		out.RawString(prefix[1:])
		out.RawText((in.ID).MarshalText())
	}
	{
		const prefix string = ",\"questionName\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"questionType\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Question) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Question) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Question) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Question) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels5(l, v)
}
func easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels6(in *jlexer.Lexer, out *Answer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels6(out *jwriter.Writer, in Answer) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Answer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Answer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonBc214586EncodeGithubComGoParkMailRu20232PotatikiInternalModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Answer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Answer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonBc214586DecodeGithubComGoParkMailRu20232PotatikiInternalModels6(l, v)
}
